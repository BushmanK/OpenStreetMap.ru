#!/usr/bin/python
# -*- coding: utf8 -*-

# search osm
# ErshKUS

from sphinxapi import *
import cgi, sys, json

host = 'localhost'
port = 3312
limit = 21
q = ''
#mode = SPH_MATCH_ALL
#mode = SPH_MATCH_ANY
mode=SPH_MATCH_EXTENDED2
lat = 0
lon = 0

def main():
  print "Content-type: text/javascript; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n"
  #print "Content-type: application/json; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n"
  values=cgi.FieldStorage()
  q = values.getfirst("q","")
  lat = float(values.getfirst("lat","0"))
  lon = float(values.getfirst("lon","0"))
  if not q:
    print "no query words, 'q' is empty"
    sys.exit(1)
  
  
  cl = SphinxClient()
  cl.SetServer ( host, port )
  cl.SetMatchMode ( mode )
  
  cl.SetRankingMode(SPH_RANK_SPH04)
  #cl.SetFieldWeights ({'region':10, 'district2':100, 'city2':1000, 'village2':10000, 'street2':100000, 'housenumber2':1000000})
  
  if (lat and lon):
    cl.SetGeoAnchor("lat", "lon", lat, lon)
    cl.SetSortMode ( SPH_SORT_EXTENDED, '@weight desc @geodist ASC' )
    #cl.SetSortMode ( SPH_SORT_EXPR, '@weight/@geodist' )
  else:
    cl.SetSortMode ( SPH_SORT_EXTENDED, '@weight desc' )
  
  #cl.SetFilterRange('@relevance', 10, 10000)
  #cl.SetSelect ( "*, @expr AS myweight" )
  
  if limit:
    cl.SetLimits ( 0, limit, max(limit,1000) )
  
  q = q.replace("-","\-")

  res = cl.Query ( q )
	
  if not res:
    print 'query failed: %s' % cl.GetLastError()
    sys.exit(2)

  if cl.GetLastWarning():
    print 'WARNING: %s\n' % cl.GetLastWarning()

  if not res['total_found']:
    print 'no find'
    sys.exit(0)
  
  if res.has_key('matches'):
    outputdata=[]
    for match in res['matches']:
      outputlen=match['attrs']
      outputlen['id']=match['id']
      outputlen['weight']=match['weight']     
      outputdata.append(outputlen)
      
  print json.dumps(outputdata)
  
main()
