#!/usr/local/bin/python
# -*- coding: utf8 -*-

# search osm
# ErshKUS

from sphinxapi import *
import cgi, sys, json

host = 'localhost'
port = 3312
limit = 12
q = ''

mode=SPH_MATCH_EXTENDED2
lat = 0
lon = 0
accuracy = False

output={}
output['ver']='0.5'

def main():
  print "Content-type: text/javascript; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n"
  #print "Content-type: application/json; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n"
  values=cgi.FieldStorage()
  q = values.getfirst("q","")
  lat = float(values.getfirst("lat","0"))
  lon = float(values.getfirst("lon","0"))
  accuracy = bool(values.getfirst("accuracy",""))
  asis = bool(values.getfirst("asis",""))
  output['search']=q
  if not asis :
    output['search'] = output['search'].replace('&','&amp;')
    output['search'] = output['search'].replace('\"',"&quot;")
    output['search'] = output['search'].replace('\'','&#039;')
    output['search'] = output['search'].replace('<','&lt;')
    output['search'] = output['search'].replace('>','&gt;')
  if not q:
    output['error']="no query words, 'q' is empty"
    return
  
  
  cl = SphinxClient()
  cl.SetServer ( host, port )
  cl.SetMatchMode ( mode )
  
  cl.SetRankingMode(SPH_RANK_SPH04)
  
  if (lat and lon):
    cl.SetGeoAnchor("lat", "lon", lat, lon)
    cl.SetSortMode ( SPH_SORT_EXTENDED, '@weight desc @geodist ASC' )
    #cl.SetSortMode ( SPH_SORT_EXPR, '@weight/@geodist' )
  else:
    cl.SetSortMode ( SPH_SORT_EXTENDED, '@weight desc' )
  
  #cl.SetFilterRange('@relevance', 10, 10000)
  #cl.SetSelect ( "*, @expr AS myweight" )
  
  if limit:
    cl.SetLimits ( 0, limit, max(limit,1000) )
  
  q = q.replace("-"," \-")
  q = q.replace("/","\/")

  res = cl.Query ( q )
	
  if not res:
    output['error']='query failed: %s' % cl.GetLastError()
    return

  if cl.GetLastWarning():
    output['error']='WARNING: %s\n' % cl.GetLastWarning()
    return

  if not res['total_found']:
    output['find']=0
    return
  
  if res.has_key('matches'):
    output['find']=1
    output['accuracy_find']=0
    outputdata=[]
    weight_min=(res['matches'][0]['weight']-100)
    for match in res['matches']:
      
      if (not accuracy) or (accuracy and match['weight']>weight_min) :
        outputlen=match['attrs']
        outputlen['id']=match['id']
        outputlen['weight']=match['weight']
        if not asis :
          outputlen['display_name'] = outputlen['display_name'].replace('&','&amp;')
          outputlen['display_name'] = outputlen['display_name'].replace('\"',"&quot;")
          outputlen['display_name'] = outputlen['display_name'].replace('\'','&#039;')
          outputlen['display_name'] = outputlen['display_name'].replace('<','&lt;')
          outputlen['display_name'] = outputlen['display_name'].replace('>','&gt;')
        outputdata.append(outputlen)
        output['accuracy_find']=1
      
  output['matches']=outputdata
  
main()
print json.dumps(output)
